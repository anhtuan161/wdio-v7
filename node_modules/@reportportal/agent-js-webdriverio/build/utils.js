"use strict";
/*
 *  Copyright 2021 EPAM Systems
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTags = exports.getCodeRef = exports.getStartLaunchObj = exports.getSystemAttributes = exports.getAgentInfo = exports.getClientConfig = exports.promiseErrorHandler = void 0;
const path_1 = __importDefault(require("path"));
// @ts-ignore
const package_json_1 = require("../package.json");
const promiseErrorHandler = (promise) => {
    promise.catch((err) => {
        console.error(err);
    });
};
exports.promiseErrorHandler = promiseErrorHandler;
const getClientConfig = (options) => {
    const { token, endpoint, launch, project, rerun, rerunOf, skippedIssue, description, attributes, mode, debug, headers, restClientConfig, } = options;
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ token,
        endpoint,
        launch,
        project }, (rerun && { rerun })), (rerunOf && { rerunOf })), (skippedIssue && { skippedIssue })), (description && { description })), (attributes && { attributes })), (mode && { mode })), (debug && { debug })), (headers && { headers })), (restClientConfig && { restClientConfig }));
};
exports.getClientConfig = getClientConfig;
const getAgentInfo = () => ({
    name: package_json_1.name,
    version: package_json_1.version,
});
exports.getAgentInfo = getAgentInfo;
const getSystemAttributes = () => {
    return [
        {
            key: 'agent',
            value: `${package_json_1.name}|${package_json_1.version}`,
            system: true,
        },
    ];
};
exports.getSystemAttributes = getSystemAttributes;
const getStartLaunchObj = (config, launchObj = {}) => {
    const systemAttributes = (0, exports.getSystemAttributes)();
    return Object.assign({ description: config.description, attributes: [...(config.attributes || []), ...systemAttributes], rerun: config.rerun, rerunOf: config.rerunOf, mode: config.mode }, launchObj);
};
exports.getStartLaunchObj = getStartLaunchObj;
const getCodeRef = (filePath, title, ancestors) => {
    const relativePath = path_1.default.relative(process.cwd(), filePath).replace(/\\/g, '/');
    const ancestorsTitles = ancestors.map((item) => item.name);
    return [relativePath, ...ancestorsTitles, title].join('/');
};
exports.getCodeRef = getCodeRef;
const parseTags = (tags) => {
    return tags
        .map((item) => {
        if (typeof item === 'string')
            return null;
        const tag = item.name.slice(1);
        if (tag.includes(':')) {
            const [key, value] = tag.split(':');
            return { key, value };
        }
        else {
            return { value: tag };
        }
    })
        .filter(Boolean);
};
exports.parseTags = parseTags;
//# sourceMappingURL=utils.js.map